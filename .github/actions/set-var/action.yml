name: "Set Deployment Variables"

inputs:
  microservice:
    description: "Target microservice (react, angular, dotnet, grafana, prometheus)"
    required: true

  docker_hub_username:
    description: "Docker Hub username"
    required: true

  aws-access-key-id:
    description: "AWS Access Key ID"
    required: true

  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: true    

  aws-region:
    description: "AWS Region"
    required: true    

runs:
  using: "composite"
  steps:
    - id: short-sha
      name: Generate SHORT_SHA
      shell: bash
      run: |
        SHORT_SHA=$(git rev-parse --short=7 HEAD)
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV

    - name: Configure AWS Credentials
      if: ${{ inputs.aws-access-key-id && inputs.aws-secret-access-key }}
      uses: aws-actions/configure-aws-credentials@v5
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
    
    - name: Fetch Backend (Dotnet) DNS
      shell: bash
      run: |
        echo "Fetching Backend (Dotnet) DNS name from AWS..."
        DOTNET_DNS=$(aws ec2 describe-instances \
          --region eu-central-1 \
          --filters "Name=tag:Name,Values=dotnet" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)

        echo "Raw DOTNET_DNS fetched value: $DOTNET_DNS" 

        if [ -z "$DOTNET_DNS" ]; then
          echo "Warning: DOTNET_DNS name could not be fetched! Defaulting to localhost:8080."
          DOTNET_DNS="localhost:8080"
        fi

        export BASE_API_URL="http://${DOTNET_DNS}:8080"
        echo "BASE_API_URL=${BASE_API_URL}" >> $GITHUB_ENV
        echo "Successfully fetched and exported BASE_API_URL: ${BASE_API_URL}"

    - name: Set React Environment
      if: ${{ inputs.microservice == 'react' }}
      shell: bash
      run: |
        echo "PORT=80" >> $GITHUB_ENV
        echo "CONTAINER_NAME=react-app" >> $GITHUB_ENV
        echo "INSTANCE_NAME=react" >> $GITHUB_ENV
        echo "CONTEXT=frontend/react" >> $GITHUB_ENV
        echo "DOCKERFILE=frontend/react/Dockerfile" >> $GITHUB_ENV
        echo "REPO=${{ inputs.docker_hub_username }}/react" >> $GITHUB_ENV
        
        echo "Updating BASE_API_URL in React project"
        jq --arg url "$BASE_API_URL" '.environment.backendApiUrl = $url' frontend/react/config.json > tmp.config.json && mv tmp.config.json frontend/react/config.json
        cat frontend/react/config.json

    - name: Set Angular Environment
      if: ${{ inputs.microservice == 'angular' }}
      shell: bash
      run: |
        echo "PORT=80" >> $GITHUB_ENV
        echo "CONTAINER_NAME=angular-app" >> $GITHUB_ENV
        echo "INSTANCE_NAME=angular" >> $GITHUB_ENV
        echo "CONTEXT=frontend/angular" >> $GITHUB_ENV
        echo "DOCKERFILE=frontend/angular/Dockerfile" >> $GITHUB_ENV
        echo "REPO=${{ inputs.docker_hub_username }}/angular" >> $GITHUB_ENV

        echo "Updating BASE_API_URL in Angular project"
        jq --arg url "$BASE_API_URL" '.environment.apiBackendUrl = $url' frontend/angular/config.json > tmp.config.json && mv tmp.config.json frontend/angular/config.json
        cat frontend/angular/config.json

    - name: Set Dotnet Environment
      if: ${{ inputs.microservice == 'dotnet' }}
      shell: bash
      run: |
        echo "PORT=8080" >> $GITHUB_ENV
        echo "CONTAINER_NAME=dotnet-app" >> $GITHUB_ENV
        echo "INSTANCE_NAME=dotnet" >> $GITHUB_ENV
        echo "CONTEXT=backend/ApiService" >> $GITHUB_ENV
        echo "DOCKERFILE=backend/ApiService/Dockerfile" >> $GITHUB_ENV
        echo "REPO=${{ inputs.docker_hub_username }}/dotnet" >> $GITHUB_ENV
    
    - name: Set Grafana Environment
      if: ${{ inputs.microservice == 'grafana' }}
      shell: bash
      run: |
        echo "PORT=3001" >> $GITHUB_ENV
        echo "CONTAINER_NAME=grafana-app" >> $GITHUB_ENV
        echo "INSTANCE_NAME=grafana" >> $GITHUB_ENV
        echo "CONTEXT=monitoring/grafana" >> $GITHUB_ENV
        echo "DOCKERFILE=monitoring/grafana/Dockerfile" >> $GITHUB_ENV
        echo "REPO=${{ inputs.docker_hub_username }}/grafana" >> $GITHUB_ENV

    - name: Set Prometheus Environment
      if: ${{ inputs.microservice == 'prometheus' }}
      shell: bash
      run: |
        echo "PORT=9090" >> $GITHUB_ENV
        echo "CONTAINER_NAME=prometheus-app" >> $GITHUB_ENV
        echo "INSTANCE_NAME=prometheus" >> $GITHUB_ENV
        echo "CONTEXT=monitoring/prometheus" >> $GITHUB_ENV
        echo "DOCKERFILE=monitoring/prometheus/Dockerfile" >> $GITHUB_ENV
        echo "REPO=${{ inputs.docker_hub_username }}/prometheus" >> $GITHUB_ENV