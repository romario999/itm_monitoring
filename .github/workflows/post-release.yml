name: release deploy

on:
  workflow_dispatch:

jobs:
  get-latest-tag:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.get_tag.outputs.tag }}
      tag_version: ${{ steps.get_tag.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          TAG_VERSION=${LATEST_TAG#v}
          echo "Latest tag: $LATEST_TAG"
          echo "Tag version: $TAG_VERSION"
          echo "tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
          echo "version=$TAG_VERSION" >> "$GITHUB_OUTPUT"

  verify-images:
    runs-on: ubuntu-latest
    needs: get-latest-tag
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Verify Docker images exist
        run: |
          echo "Verifying that Docker images with tag ${{ needs.get-latest-tag.outputs.tag_version }} exist..."
          
          SERVICES=("react" "angular" "dotnet")
          for service in "${SERVICES[@]}"; do
            IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/${service}:${{ needs.get-latest-tag.outputs.tag_version }}"
            echo "Checking if $IMAGE exists..."
            
            if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
              echo "Image $IMAGE exists"
            else
              echo "Image $IMAGE does not exist"
              echo "::error::Docker image $IMAGE was not found. Make sure the individual service pipelines completed successfully."
              exit 1
            fi
          done
          
          echo "All Docker images verified successfully!"

  deploy:
    needs: [get-latest-tag, verify-images]
    uses: ./.github/workflows/auto-deploy.yml
    with:
      tag: ${{ needs.get-latest-tag.outputs.tag_version }}
    secrets: inherit

  create-github-release:
    runs-on: ubuntu-latest
    needs: [get-latest-tag, verify-images, deploy]
    permissions:
      contents: write
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.get-latest-tag.outputs.latest_tag }}
    
      - name: Set release variables
        id: vars
        run: |
          echo "VERSION=${{ needs.get-latest-tag.outputs.tag_version }}" >> $GITHUB_ENV
          echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" >> $GITHUB_ENV
    
      - name: Generate Changelog
        id: changelog
        run: |
          VERSION="${{ needs.get-latest-tag.outputs.latest_tag }}"
          LAST_TAG=$(git describe --tags --abbrev=0 --exclude="$VERSION" 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges | head -10)
          else
            CHANGELOG=$(git log "$LAST_TAG..$VERSION" --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          {
            echo "CHANGELOG<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> "$GITHUB_ENV"
    
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ needs.get-latest-tag.outputs.latest_tag }}"
          name: "Release ${{ needs.get-latest-tag.outputs.latest_tag }}"
          body: |
            ## Release ${{ needs.get-latest-tag.outputs.latest_tag }}
            
            ### Docker Images
            Docker images with tag ${{ needs.get-latest-tag.outputs.tag_version }} were already built by individual service pipelines:
            - `${{ env.DOCKER_HUB_USERNAME }}/react:${{ needs.get-latest-tag.outputs.tag_version }}`
            - `${{ env.DOCKER_HUB_USERNAME }}/angular:${{ needs.get-latest-tag.outputs.tag_version }}`
            - `${{ env.DOCKER_HUB_USERNAME }}/dotnet:${{ needs.get-latest-tag.outputs.tag_version }}`
            
            ### Changes
            ${{ env.CHANGELOG }}
            
            ### Services Updated
            All microservices have been updated and deployed with version ${{ needs.get-latest-tag.outputs.tag_version }}
          draft: false
          prerelease: false